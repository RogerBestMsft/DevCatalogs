$schema: "1.0"
name: "remove-maui-workloads"
image: microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win11-m365-gen2
tasks:
  - name: powershell
    description: Identify and remove all MAUI workloads using Visual Studio Installer CLI
    runElevated: true
    parameters:
      command: |
        # Script to remove MAUI workloads from Visual Studio installations
        Write-Host "Starting MAUI workload removal process..."
        Write-Host "Running in elevated context for Visual Studio modification..." -ForegroundColor Green
        
        # Define MAUI-related workload IDs
        $mauiWorkloads = @(
            "Microsoft.VisualStudio.Workload.NetCrossPlat",
            "Microsoft.VisualStudio.Component.MonoDebugger",
            "Microsoft.VisualStudio.ComponentGroup.Maui.All",
            "Microsoft.VisualStudio.ComponentGroup.Maui.Blazor",
            "Microsoft.VisualStudio.ComponentGroup.Maui.Windows",
            "Microsoft.VisualStudio.ComponentGroup.Maui.Android",
            "Microsoft.VisualStudio.ComponentGroup.Maui.iOS",
            "Microsoft.VisualStudio.ComponentGroup.Maui.MacCatalyst",
            "Microsoft.Component.NetFX.Native",
            "Microsoft.VisualStudio.Component.Graphics.Tools"
        )
        
        # Find Visual Studio Installer
        $vsWherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        if (-not (Test-Path $vsWherePath)) {
            Write-Host "Visual Studio Installer not found at expected location" -ForegroundColor Red
            exit 1
        }
        
        # Get all Visual Studio installations
        Write-Host "Getting Visual Studio installations..."
        $installations = & $vsWherePath -all -products * -format json | ConvertFrom-Json
        
        if (-not $installations) {
            Write-Host "No Visual Studio installations found" -ForegroundColor Yellow
            exit 0
        }
        
        # Ensure $installations is an array even if only one installation is found
        if ($installations -isnot [array]) {
            $installations = @($installations)
        }
        
        foreach ($installation in $installations) {
            Write-Host "Processing Visual Studio installation: $($installation.displayName)" -ForegroundColor Green
            Write-Host "Installation path: $($installation.installationPath)" -ForegroundColor Gray
            Write-Host "Product ID: $($installation.productId)" -ForegroundColor Gray
            
            # Try to get packages using Visual Studio Installer export
            Write-Host "Checking for installed MAUI workloads using VS Installer..." -ForegroundColor Gray
            $vsInstallerPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
            
            # Check if any MAUI workloads are installed by attempting to remove them (dry run approach)
            $installedMauiWorkloads = @()
            foreach ($workload in $mauiWorkloads) {
                # Use vswhere to check if this specific workload is installed
                $checkResult = & $vsWherePath -all -products * -requires $workload
                if ($checkResult) {
                    $installedMauiWorkloads += $workload
                    Write-Host "Found MAUI workload: $workload" -ForegroundColor Yellow
                }
            }
            
            if ($installedMauiWorkloads.Count -eq 0) {
                Write-Host "No MAUI workloads found in this installation" -ForegroundColor Green
                continue
            }
            
            # Build modify command to remove MAUI workloads
            $removeArgs = @("modify", "--installPath", $installation.installationPath, "--quiet")
            
            foreach ($workload in $installedMauiWorkloads) {
                $removeArgs += "--remove"
                $removeArgs += $workload
            }
            
            Write-Host "Removing MAUI workloads from installation..." -ForegroundColor Cyan
            Write-Host "Command: $vsInstallerPath $($removeArgs -join ' ')" -ForegroundColor Gray
            
            try {
                # Run VS Installer (already in elevated context)
                Write-Host "Executing Visual Studio Installer..." -ForegroundColor Cyan
                $process = Start-Process -FilePath $vsInstallerPath -ArgumentList $removeArgs -Wait -PassThru -WindowStyle Hidden
                
                if ($process.ExitCode -eq 0) {
                    Write-Host "Successfully removed MAUI workloads from installation" -ForegroundColor Green
                } elseif ($process.ExitCode -eq 5007) {
                    Write-Host "Elevation issue detected. Retrying without --quiet flag..." -ForegroundColor Yellow
                    # Try without --quiet for better compatibility
                    $removeArgsInteractive = @("modify", "--installPath", $installation.installationPath)
                    foreach ($workload in $installedMauiWorkloads) {
                        $removeArgsInteractive += "--remove"
                        $removeArgsInteractive += $workload
                    }
                    $processInteractive = Start-Process -FilePath $vsInstallerPath -ArgumentList $removeArgsInteractive -Wait -PassThru -WindowStyle Hidden
                    if ($processInteractive.ExitCode -eq 0) {
                        Write-Host "Successfully removed MAUI workloads from installation" -ForegroundColor Green
                    } else {
                        Write-Host "Failed to remove MAUI workloads. Exit code: $($processInteractive.ExitCode)" -ForegroundColor Red
                    }
                } else {
                    Write-Host "Failed to remove MAUI workloads. Exit code: $($process.ExitCode)" -ForegroundColor Red
                }
            } catch {
                Write-Host "Error running Visual Studio Installer: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
        
        Write-Host "MAUI workload removal process completed" -ForegroundColor Green
