$schema: "1.0"
name: "remove-maui-workloads"
image: microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win11-m365-gen2
tasks:
  - name: powershell
    description: Identify and remove all MAUI workloads using Visual Studio Installer CLI
    parameters:
      command: |
        #Requires -RunAsAdministrator
        
        <#
        .SYNOPSIS
            Removes all MAUI workloads from Visual Studio installations.
        
        .DESCRIPTION
            This script identifies all Visual Studio installations and removes MAUI-related workloads
            using the Visual Studio Installer CLI. It processes each workload individually for better
            error handling and reliability.
        
        .PARAMETER Force
            Skips confirmation prompts and removes workloads immediately.
        
        .EXAMPLE
            .\Remove-MauiWorkloads.ps1
            Interactively removes MAUI workloads with confirmation prompts.
        
        .EXAMPLE
            .\Remove-MauiWorkloads.ps1 -Force
            Removes MAUI workloads without confirmation prompts.
        #>
        
        [CmdletBinding()]
        param(
            [switch]$Force
        )
        
        # Define MAUI-related workload IDs
        $mauiWorkloads = @(
            "Microsoft.VisualStudio.Workload.NetCrossPlat",
            "Microsoft.VisualStudio.Component.MonoDebugger", 
            "Microsoft.VisualStudio.ComponentGroup.Maui.All",
            "Microsoft.VisualStudio.ComponentGroup.Maui.Blazor",
            "Microsoft.VisualStudio.ComponentGroup.Maui.Windows",
            "Microsoft.VisualStudio.ComponentGroup.Maui.Android",
            "Microsoft.VisualStudio.ComponentGroup.Maui.iOS",
            "Microsoft.VisualStudio.ComponentGroup.Maui.MacCatalyst",
            "Microsoft.Component.NetFX.Native",
            "Microsoft.VisualStudio.Component.Graphics.Tools"
        )
        
        function Write-ColorOutput {
            param(
                [string]$Message,
                [string]$Color = "White"
            )
            
            $colorMap = @{
                "Red" = [ConsoleColor]::Red
                "Green" = [ConsoleColor]::Green
                "Yellow" = [ConsoleColor]::Yellow
                "Cyan" = [ConsoleColor]::Cyan
                "Gray" = [ConsoleColor]::Gray
                "White" = [ConsoleColor]::White
            }
            
            Write-Host $Message -ForegroundColor $colorMap[$Color]
        }
        
        function Test-AdminPrivileges {
            $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
            return $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
        }
        
        function Get-VisualStudioInstallations {
            $vsWherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
            
            if (-not (Test-Path $vsWherePath)) {
                throw "Visual Studio Installer not found at expected location: $vsWherePath"
            }
            
            Write-ColorOutput "Getting Visual Studio installations..." "Cyan"
            $installations = & $vsWherePath -all -products * -format json | ConvertFrom-Json
            
            if (-not $installations) {
                Write-ColorOutput "No Visual Studio installations found" "Yellow"
                return @()
            }
            
            # Ensure $installations is an array even if only one installation is found
            if ($installations -isnot [array]) {
                $installations = @($installations)
            }
            
            return $installations
        }
        
        function Remove-MauiWorkloads {
            param(
                [object]$Installation,
                [string]$VsInstallerPath
            )
            
            $successCount = 0
            $totalCount = $mauiWorkloads.Count
            
            Write-ColorOutput "Attempting to remove $totalCount MAUI workloads from $($Installation.displayName)..." "Cyan"
            
            foreach ($workload in $mauiWorkloads) {
                $removeArgs = @("modify", "--installPath", "`"$($Installation.installationPath)`"", "--quiet", "--remove", $workload)
                $commandLine = "$VsInstallerPath $($removeArgs -join ' ')"
                
                Write-ColorOutput "Removing workload: $workload" "Cyan"
                Write-ColorOutput "Command: $commandLine" "Gray"
                
                try {
                    $process = Start-Process -FilePath $VsInstallerPath -ArgumentList $removeArgs -Wait -PassThru -WindowStyle Hidden
                    
                    if ($process.ExitCode -eq 0) {
                        Write-ColorOutput "Successfully removed workload: $workload" "Green"
                        $successCount++
                    } elseif ($process.ExitCode -eq 1003) {
                        Write-ColorOutput "Workload not installed: $workload (skipping)" "Gray"
                        $successCount++  # Count as success since it's not installed anyway
                    } elseif ($process.ExitCode -eq 5007) {
                        Write-ColorOutput "Elevation issue detected for $workload. Retrying without --quiet flag..." "Yellow"
                        # Try without --quiet for better compatibility
                        $removeArgsInteractive = @("modify", "--installPath", "`"$($Installation.installationPath)`"", "--remove", $workload)
                        $processInteractive = Start-Process -FilePath $VsInstallerPath -ArgumentList $removeArgsInteractive -Wait -PassThru -WindowStyle Hidden
                        
                        if ($processInteractive.ExitCode -eq 0 -or $processInteractive.ExitCode -eq 1003) {
                            Write-ColorOutput "Successfully processed workload: $workload" "Green"
                            $successCount++
                        } else {
                            Write-ColorOutput "Failed to remove workload: $workload. Exit code: $($processInteractive.ExitCode)" "Red"
                        }
                    } else {
                        Write-ColorOutput "Failed to remove workload: $workload. Exit code: $($process.ExitCode)" "Red"
                    }
                } catch {
                    Write-ColorOutput "Error removing workload $workload : $($_.Exception.Message)" "Red"
                }
                
                # Small delay between workload removals to avoid conflicts
                Start-Sleep -Seconds 1
            }
            
            return $successCount
        }
        
        function Main {
            Write-ColorOutput "=== Visual Studio MAUI Workload Removal Script ===" "Cyan"
            Write-ColorOutput "Starting MAUI workload removal process..." "White"
            
            # Check for admin privileges
            if (-not (Test-AdminPrivileges)) {
                Write-ColorOutput "This script requires administrator privileges to modify Visual Studio installations." "Red"
                Write-ColorOutput "Please run this script as administrator." "Yellow"
                exit 1
            }
            
            Write-ColorOutput "Running with administrator privileges - proceeding with MAUI removal..." "Green"
            
            try {
                # Get Visual Studio installations
                $installations = Get-VisualStudioInstallations
                
                if ($installations.Count -eq 0) {
                    Write-ColorOutput "No Visual Studio installations found. Exiting." "Yellow"
                    return
                }
                
                $vsWherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
                $vsInstallerPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
                
                $totalWorkloadsProcessed = 0
                $totalWorkloadsSuccessful = 0
                
                foreach ($installation in $installations) {
                    Write-ColorOutput "`nProcessing Visual Studio installation: $($installation.displayName)" "Green"
                    Write-ColorOutput "Installation path: $($installation.installationPath)" "Gray"
                    Write-ColorOutput "Product ID: $($installation.productId)" "Gray"
                    
                    # Show what will be attempted
                    Write-ColorOutput "MAUI workloads to be removed:" "Yellow"
                    foreach ($workload in $mauiWorkloads) {
                        Write-ColorOutput "  - $workload" "Gray"
                    }
                    
                    # Ask for confirmation unless Force is specified
                    if (-not $Force) {
                        $response = Read-Host "`nProceed with removing MAUI workloads from $($installation.displayName)? (y/N)"
                        if ($response -notmatch '^[Yy]') {
                            Write-ColorOutput "Skipping this installation." "Yellow"
                            continue
                        }
                    }
                    
                    # Remove all MAUI workloads
                    $successCount = Remove-MauiWorkloads -Installation $installation -VsInstallerPath $vsInstallerPath
                    
                    $totalWorkloadsProcessed += $mauiWorkloads.Count
                    $totalWorkloadsSuccessful += $successCount
                    
                    Write-ColorOutput "Completed processing $($installation.displayName): $successCount/$($mauiWorkloads.Count) workloads processed successfully" "Cyan"
                }
                
                # Summary
                Write-ColorOutput "`n=== Summary ===" "Cyan"
                Write-ColorOutput "Total MAUI workloads processed: $totalWorkloadsProcessed" "White"
                Write-ColorOutput "Total MAUI workloads successfully processed: $totalWorkloadsSuccessful" "Green"
                
                if ($totalWorkloadsSuccessful -lt $totalWorkloadsProcessed) {
                    $failedCount = $totalWorkloadsProcessed - $totalWorkloadsSuccessful
                    Write-ColorOutput "Some workloads failed to process ($failedCount failed). Check the output above for details." "Red"
                } else {
                    Write-ColorOutput "All MAUI workloads were processed successfully!" "Green"
                }
                
                Write-ColorOutput "MAUI workload removal process completed" "Green"
                
            } catch {
                Write-ColorOutput "Fatal error: $($_.Exception.Message)" "Red"
                exit 1
            }
        }
        
        # Run the main function
        Main
